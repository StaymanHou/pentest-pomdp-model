from lxml import etree

TOTAL_D = 6739

SUBS = {
    "main": 6739,
    "mail": 3011,
    "m": 2684,
    "ftp": 2098,
    "blog": 1308,
    "mobile": 1304,
    "dev": 1137,
    "ns1": 1093,
    "ns2": 944,
    "test": 936,
    # "video": 861,
    # "static": 798,
    # "cdn": 770,
    # "admin": 683,
    # "ads": 534,
    # "ad": 500,
    # "forum": 444,
    # "img": 428,
    # "download": 387,
    # "demo": 298,
    # "games": 294,
    # "dns1": 222,
    # "proxy": 218,
    # "image": 198,
    # "dns": 184,
    # "flash": 149,
    # "customer": 121,
    # "pics": 104,
    # "sql": 91,
    # "staging": 37,
    # "cust1": 37,
}

# create XML
xsi = "http://www.host.org/2001/XMLSchema-instance"
NSMAP = {"xsi": xsi}

pomdpx = etree.Element("pomdpx", version="1.0", id="DomainOnly", nsmap=NSMAP)
pomdpx.attrib["{{{pre}}}noNamespaceSchemaLocation".format(pre=xsi)] = "pomdpx.xsd"

description = etree.Element("discription")
description.text = "DomainOnly problem for pentest"
pomdpx.append(description)

discount = etree.Element("Discount")
discount.text = "0.95"
pomdpx.append(discount)

# variable
variable = etree.Element("Variable")
# states
for sub, _v in SUBS.iteritems():
    vname = "domain0_"+sub
    vname_prev = vname + "_0"
    vname_curr = vname + "_1"

    state_var = etree.Element("StateVar", vnamePrev=vname_prev, vnameCurr=vname_curr)
    value_enum = etree.Element("ValueEnum")
    value_enum.text = "t f d n"
    state_var.append(value_enum)
    variable.append(state_var)
# observations
for sub, _v in SUBS.iteritems():
    obs_var = etree.Element("ObsVar", vname="obs_domain_"+sub+"_sensor")
    value_enum = etree.Element("ValueEnum")
    value_enum.text = "odt odf"
    obs_var.append(value_enum)
    variable.append(obs_var)
# actions
for sub, _v in SUBS.iteritems():
    action_var = etree.Element("ActionVar", vname="action_domain_"+sub+"_resolv")
    value_enum = etree.Element("ValueEnum")
    value_enum_text_list = []
    vname = "domain0_"+sub
    value_enum.text = "adr_"+vname
    action_var.append(value_enum)
    variable.append(action_var)
# reward
for sub, _v in SUBS.iteritems():
    reward_var = etree.Element("RewardVar", vname="reward_domain_"+sub)
    variable.append(reward_var)
pomdpx.append(variable)

# initial state belief
initial_state_belief = etree.Element("InitialStateBelief")
# states
for sub, true_occr in SUBS.iteritems():
    vname = "domain0_"+sub
    vname_prev = vname + "_0"

    cond_prob = etree.Element("CondProb")
    var = etree.Element("Var")
    var.text = vname_prev
    cond_prob.append(var)
    parent = etree.Element("Parent")
    parent.text = "null"
    cond_prob.append(parent)
    parameter = etree.Element("Parameter", type="TBL")
    entry = etree.Element("Entry")
    instance = etree.Element("Instance")
    instance.text = "-"
    entry.append(instance)
    prob_table = etree.Element("ProbTable")
    true_prob = float(true_occr)/TOTAL_D
    false_prob = 1 - true_prob
    if sub == "main":
        prob_table.text = "0 0 1 0"
    else:
        prob_table.text = "%f %f 0 0" % (true_prob, false_prob)
    entry.append(prob_table)
    parameter.append(entry)
    cond_prob.append(parameter)
    initial_state_belief.append(cond_prob)
pomdpx.append(initial_state_belief)

# state transition function
state_transition_function = etree.Element("StateTransitionFunction")
for sub, _v in SUBS.iteritems():
    vname = "domain0_"+sub
    vname_prev = vname + "_0"
    vname_curr = vname + "_1"
    action_name = "adr_domain0_"+sub
    action_vname = "action_domain_"+sub+"_resolv"

    cond_prob = etree.Element("CondProb")
    var = etree.Element("Var")
    var.text = vname_curr
    cond_prob.append(var)
    parent = etree.Element("Parent")
    parent.text = "%s %s" % (action_vname, vname_prev)
    cond_prob.append(parent)
    parameter = etree.Element("Parameter", type="TBL")
    # t -> d
    entry = etree.Element("Entry")
    instance = etree.Element("Instance")
    instance.text = "%s t -" % action_name
    entry.append(instance)
    prob_table = etree.Element("ProbTable")
    prob_table.text = "0 0 1 0"
    entry.append(prob_table)
    parameter.append(entry)
    # f -> n
    entry = etree.Element("Entry")
    instance = etree.Element("Instance")
    instance.text = "%s f -" % action_name
    entry.append(instance)
    prob_table = etree.Element("ProbTable")
    prob_table.text = "0 0 0 1"
    entry.append(prob_table)
    parameter.append(entry)
    # d -> d
    entry = etree.Element("Entry")
    instance = etree.Element("Instance")
    instance.text = "%s d -" % action_name
    entry.append(instance)
    prob_table = etree.Element("ProbTable")
    prob_table.text = "0 0 1 0"
    entry.append(prob_table)
    parameter.append(entry)
    # n -> n
    entry = etree.Element("Entry")
    instance = etree.Element("Instance")
    instance.text = "%s n -" % action_name
    entry.append(instance)
    prob_table = etree.Element("ProbTable")
    prob_table.text = "0 0 0 1"
    entry.append(prob_table)
    parameter.append(entry)

    cond_prob.append(parameter)
    state_transition_function.append(cond_prob)
pomdpx.append(state_transition_function)

# observation function
obs_function = etree.Element("ObsFunction")
# domain obs
for sub, _v in SUBS.iteritems():
    vname = "domain0_"+sub
    vname_prev = vname + "_0"
    vname_curr = vname + "_1"
    action_name = "adr_domain0_"+sub
    action_vname = "action_domain_"+sub+"_resolv"
    obs_vname = "obs_domain_"+sub+"_sensor"

    cond_prob = etree.Element("CondProb")
    var = etree.Element("Var")
    var.text = obs_vname
    cond_prob.append(var)
    parent = etree.Element("Parent")
    parent.text = "%s %s" % (action_vname, vname_curr)
    cond_prob.append(parent)
    parameter = etree.Element("Parameter", type="TBL")
    # * -> d
    entry = etree.Element("Entry")
    instance = etree.Element("Instance")
    instance.text = "%s d -" % action_name
    entry.append(instance)
    prob_table = etree.Element("ProbTable")
    prob_table.text = "1 0"
    entry.append(prob_table)
    parameter.append(entry)
    # * -> n
    entry = etree.Element("Entry")
    instance = etree.Element("Instance")
    instance.text = "%s n -" % action_name
    entry.append(instance)
    prob_table = etree.Element("ProbTable")
    prob_table.text = "0 1"
    entry.append(prob_table)
    parameter.append(entry)
    # irrelevant actions -> f
    entry = etree.Element("Entry")
    instance = etree.Element("Instance")
    instance.text = "%s f *" % action_name
    entry.append(instance)
    prob_table = etree.Element("ProbTable")
    prob_table.text = "0"
    entry.append(prob_table)
    parameter.append(entry)
    # irrelevant actions -> t
    entry = etree.Element("Entry")
    instance = etree.Element("Instance")
    instance.text = "%s t *" % action_name
    entry.append(instance)
    prob_table = etree.Element("ProbTable")
    prob_table.text = "0"
    entry.append(prob_table)
    parameter.append(entry)
    cond_prob.append(parameter)
    obs_function.append(cond_prob)
pomdpx.append(obs_function)

# reward function
reward_function = etree.Element("RewardFunction")
# domain obs
for sub, _v in SUBS.iteritems():
    vname = "domain0_"+sub
    vname_prev = vname + "_0"
    vname_curr = vname + "_1"
    action_name = "adr_domain0_"+sub
    action_vname = "action_domain_"+sub+"_resolv"
    reward_vname = "reward_domain_"+sub

    func = etree.Element("Func")
    var = etree.Element("Var")
    var.text = reward_vname
    func.append(var)
    parent = etree.Element("Parent")
    parent.text = "%s %s" % (action_vname, vname_prev)
    func.append(parent)
    parameter = etree.Element("Parameter", type="TBL")

    entry = etree.Element("Entry")
    instance = etree.Element("Instance")
    instance.text = "%s -" % action_name
    entry.append(instance)
    value_table = etree.Element("ValueTable")
    value_table.text = "5 -1 -1 -1"
    entry.append(value_table)
    parameter.append(entry)

    func.append(parameter)
    reward_function.append(func)
pomdpx.append(reward_function)


# pretty string
s = etree.tostring(pomdpx, pretty_print=True, xml_declaration=True, encoding="utf-8")
open("domain_only.pomdpx", "w").write(s)
